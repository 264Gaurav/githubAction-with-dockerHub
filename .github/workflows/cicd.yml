name: githubAction with dockerhub

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  contents: read
  pull-requests: write # needed to comment on PRs

jobs:
  lint-and-test:
    name: Lint & Test Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run pytest
        run: pytest
      - name: Report results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `‚úÖ Lint & Test completed successfully for commit **${context.sha.substring(0,7)}**`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

  docker-build:
    name: Build Docker image
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image (no push for PRs)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:ci-${{ github.sha }}
      - name: Report results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `üê≥ Docker image built successfully (tag: \`${{secrets.DOCKER_IMAGE}}:ci-${context.sha.substring(0,7)}\`)`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

  docker-publish:
    name: Push Docker image to Docker Hub
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      - name: Ensure Docker Hub repository exists
        run: |
          USERNAME="${{ secrets.DOCKER_USERNAME }}"
          PASSWORD="${{ secrets.DOCKER_PASSWORD }}"
          REPO="${DOCKER_IMAGE#*/}"
          ORG="${DOCKER_IMAGE%%/*}"

          echo "Checking if repo $DOCKER_IMAGE exists..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -u "$USERNAME:$PASSWORD" \
            https://hub.docker.com/v2/repositories/$DOCKER_IMAGE/)

          if [ "$STATUS" -eq 200 ]; then
            echo "‚úÖ Repo already exists: $DOCKER_IMAGE"
          else
            echo "üöÄ Creating repo: $DOCKER_IMAGE"
            curl -s -o /dev/null -w "%{http_code}" -u "$USERNAME:$PASSWORD" \
              -H "Content-Type: application/json" \
              -X POST https://hub.docker.com/v2/repositories/ \
              -d "{\"namespace\": \"$ORG\", \"name\": \"$REPO\", \"is_private\": false}"
          fi
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
